# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tm_motion/ActionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActionGoal(genpy.Message):
  _md5sum = "ad6a855c450be493ec664cf999a8fdac"
  _type = "tm_motion/ActionGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
string goal_function
string goal_param
float64 goal_goal1
float64 goal_goal2
float64 goal_goal3
float64 goal_goal4
float64 goal_goal5
float64 goal_goal6

"""
  __slots__ = ['goal_function','goal_param','goal_goal1','goal_goal2','goal_goal3','goal_goal4','goal_goal5','goal_goal6']
  _slot_types = ['string','string','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       goal_function,goal_param,goal_goal1,goal_goal2,goal_goal3,goal_goal4,goal_goal5,goal_goal6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.goal_function is None:
        self.goal_function = ''
      if self.goal_param is None:
        self.goal_param = ''
      if self.goal_goal1 is None:
        self.goal_goal1 = 0.
      if self.goal_goal2 is None:
        self.goal_goal2 = 0.
      if self.goal_goal3 is None:
        self.goal_goal3 = 0.
      if self.goal_goal4 is None:
        self.goal_goal4 = 0.
      if self.goal_goal5 is None:
        self.goal_goal5 = 0.
      if self.goal_goal6 is None:
        self.goal_goal6 = 0.
    else:
      self.goal_function = ''
      self.goal_param = ''
      self.goal_goal1 = 0.
      self.goal_goal2 = 0.
      self.goal_goal3 = 0.
      self.goal_goal4 = 0.
      self.goal_goal5 = 0.
      self.goal_goal6 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.goal_function
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.goal_goal1, _x.goal_goal2, _x.goal_goal3, _x.goal_goal4, _x.goal_goal5, _x.goal_goal6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_function = str[start:end].decode('utf-8')
      else:
        self.goal_function = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_param = str[start:end].decode('utf-8')
      else:
        self.goal_param = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.goal_goal1, _x.goal_goal2, _x.goal_goal3, _x.goal_goal4, _x.goal_goal5, _x.goal_goal6,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.goal_function
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal_param
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.goal_goal1, _x.goal_goal2, _x.goal_goal3, _x.goal_goal4, _x.goal_goal5, _x.goal_goal6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_function = str[start:end].decode('utf-8')
      else:
        self.goal_function = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_param = str[start:end].decode('utf-8')
      else:
        self.goal_param = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.goal_goal1, _x.goal_goal2, _x.goal_goal3, _x.goal_goal4, _x.goal_goal5, _x.goal_goal6,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
